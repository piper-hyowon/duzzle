/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface NFTSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'BACKEND_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'executeNFTSwap'
      | 'getBackendRoleMemberCount'
      | 'getBackendRoleMembers'
      | 'getRoleAdmin'
      | 'grantBackendRole'
      | 'grantRole'
      | 'hasRole'
      | 'renounceRole'
      | 'revokeBackendRole'
      | 'revokeRole'
      | 'supportsInterface',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'BackendRoleGranted'
      | 'BackendRoleRevoked'
      | 'NFTSwapCompleted'
      | 'NFTSwapFailed'
      | 'RoleAdminChanged'
      | 'RoleGranted'
      | 'RoleRevoked',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'BACKEND_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'executeNFTSwap',
    values: [
      AddressLike[],
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      AddressLike,
      AddressLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getBackendRoleMemberCount',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getBackendRoleMembers',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantBackendRole',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeBackendRole',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'BACKEND_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeNFTSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBackendRoleMemberCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBackendRoleMembers',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantBackendRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'revokeBackendRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
}

export namespace BackendRoleGrantedEvent {
  export type InputTuple = [account: AddressLike, sender: AddressLike];
  export type OutputTuple = [account: string, sender: string];
  export interface OutputObject {
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BackendRoleRevokedEvent {
  export type InputTuple = [account: AddressLike, sender: AddressLike];
  export type OutputTuple = [account: string, sender: string];
  export interface OutputObject {
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSwapCompletedEvent {
  export type InputTuple = [user1: AddressLike, user2: AddressLike];
  export type OutputTuple = [user1: string, user2: string];
  export interface OutputObject {
    user1: string;
    user2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSwapFailedEvent {
  export type InputTuple = [
    user1: AddressLike,
    user2: AddressLike,
    reason: string,
  ];
  export type OutputTuple = [user1: string, user2: string, reason: string];
  export interface OutputObject {
    user1: string;
    user2: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike,
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string,
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTSwap extends BaseContract {
  connect(runner?: ContractRunner | null): NFTSwap;
  waitForDeployment(): Promise<this>;

  interface: NFTSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  BACKEND_ROLE: TypedContractMethod<[], [string], 'view'>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>;

  executeNFTSwap: TypedContractMethod<
    [
      nftContractsGivenByA: AddressLike[],
      tokenIdsGivenByA: BigNumberish[],
      nftContractsGivenByB: AddressLike[],
      tokenIdsGivenByB: BigNumberish[],
      userA: AddressLike,
      userB: AddressLike,
    ],
    [void],
    'nonpayable'
  >;

  getBackendRoleMemberCount: TypedContractMethod<[], [bigint], 'view'>;

  getBackendRoleMembers: TypedContractMethod<[], [string[]], 'view'>;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>;

  grantBackendRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    'nonpayable'
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    'nonpayable'
  >;

  revokeBackendRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    'nonpayable'
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'BACKEND_ROLE',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'DEFAULT_ADMIN_ROLE',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'executeNFTSwap',
  ): TypedContractMethod<
    [
      nftContractsGivenByA: AddressLike[],
      tokenIdsGivenByA: BigNumberish[],
      nftContractsGivenByB: AddressLike[],
      tokenIdsGivenByB: BigNumberish[],
      userA: AddressLike,
      userB: AddressLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'getBackendRoleMemberCount',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getBackendRoleMembers',
  ): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getRoleAdmin',
  ): TypedContractMethod<[role: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'grantBackendRole',
  ): TypedContractMethod<[account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'grantRole',
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'hasRole',
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'renounceRole',
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'revokeBackendRole',
  ): TypedContractMethod<[account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'revokeRole',
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'supportsInterface',
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;

  getEvent(
    key: 'BackendRoleGranted',
  ): TypedContractEvent<
    BackendRoleGrantedEvent.InputTuple,
    BackendRoleGrantedEvent.OutputTuple,
    BackendRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'BackendRoleRevoked',
  ): TypedContractEvent<
    BackendRoleRevokedEvent.InputTuple,
    BackendRoleRevokedEvent.OutputTuple,
    BackendRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: 'NFTSwapCompleted',
  ): TypedContractEvent<
    NFTSwapCompletedEvent.InputTuple,
    NFTSwapCompletedEvent.OutputTuple,
    NFTSwapCompletedEvent.OutputObject
  >;
  getEvent(
    key: 'NFTSwapFailed',
  ): TypedContractEvent<
    NFTSwapFailedEvent.InputTuple,
    NFTSwapFailedEvent.OutputTuple,
    NFTSwapFailedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleAdminChanged',
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleGranted',
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleRevoked',
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    'BackendRoleGranted(address,address)': TypedContractEvent<
      BackendRoleGrantedEvent.InputTuple,
      BackendRoleGrantedEvent.OutputTuple,
      BackendRoleGrantedEvent.OutputObject
    >;
    BackendRoleGranted: TypedContractEvent<
      BackendRoleGrantedEvent.InputTuple,
      BackendRoleGrantedEvent.OutputTuple,
      BackendRoleGrantedEvent.OutputObject
    >;

    'BackendRoleRevoked(address,address)': TypedContractEvent<
      BackendRoleRevokedEvent.InputTuple,
      BackendRoleRevokedEvent.OutputTuple,
      BackendRoleRevokedEvent.OutputObject
    >;
    BackendRoleRevoked: TypedContractEvent<
      BackendRoleRevokedEvent.InputTuple,
      BackendRoleRevokedEvent.OutputTuple,
      BackendRoleRevokedEvent.OutputObject
    >;

    'NFTSwapCompleted(address,address)': TypedContractEvent<
      NFTSwapCompletedEvent.InputTuple,
      NFTSwapCompletedEvent.OutputTuple,
      NFTSwapCompletedEvent.OutputObject
    >;
    NFTSwapCompleted: TypedContractEvent<
      NFTSwapCompletedEvent.InputTuple,
      NFTSwapCompletedEvent.OutputTuple,
      NFTSwapCompletedEvent.OutputObject
    >;

    'NFTSwapFailed(address,address,string)': TypedContractEvent<
      NFTSwapFailedEvent.InputTuple,
      NFTSwapFailedEvent.OutputTuple,
      NFTSwapFailedEvent.OutputObject
    >;
    NFTSwapFailed: TypedContractEvent<
      NFTSwapFailedEvent.InputTuple,
      NFTSwapFailedEvent.OutputTuple,
      NFTSwapFailedEvent.OutputObject
    >;

    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
