/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface PlayDuzzleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'DEFAULT_ADMIN_ROLE'
      | 'blueprintItemToken'
      | 'dalToken'
      | 'getAllSeasonIds'
      | 'getDataBySeasonId'
      | 'getItemMintedCountsBySeasonId'
      | 'getPuzzlePieceMintedCountsBySeasonId'
      | 'getRandomItem'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'offset'
      | 'puzzlePieceToken'
      | 'renounceRole'
      | 'revokeRole'
      | 'seasons'
      | 'setZoneData'
      | 'startSeason'
      | 'supportsInterface'
      | 'thisSeasonId'
      | 'unlockPuzzlePiece',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'RoleAdminChanged'
      | 'RoleGranted'
      | 'RoleRevoked'
      | 'SetZoneData'
      | 'StartSeason'
      | 'UnlockPuzzlePiece',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'blueprintItemToken',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'dalToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAllSeasonIds',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDataBySeasonId',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getItemMintedCountsBySeasonId',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPuzzlePieceMintedCountsBySeasonId',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRandomItem',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'offset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'puzzlePieceToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'seasons',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setZoneData',
    values: [BigNumberish, BigNumberish, AddressLike[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'startSeason',
    values: [
      AddressLike[],
      string[],
      string[],
      string[],
      BigNumberish[],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'thisSeasonId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockPuzzlePiece',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'blueprintItemToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'dalToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAllSeasonIds',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDataBySeasonId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getItemMintedCountsBySeasonId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPuzzlePieceMintedCountsBySeasonId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRandomItem',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'offset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'puzzlePieceToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seasons', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setZoneData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'startSeason',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'thisSeasonId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockPuzzlePiece',
    data: BytesLike,
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike,
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string,
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetZoneDataEvent {
  export type InputTuple = [
    zoneId: BigNumberish,
    pieceCountOfZones: BigNumberish,
    requiredItemsForMinting: AddressLike[],
    requiredItemAmount: BigNumberish[],
  ];
  export type OutputTuple = [
    zoneId: bigint,
    pieceCountOfZones: bigint,
    requiredItemsForMinting: string[],
    requiredItemAmount: bigint[],
  ];
  export interface OutputObject {
    zoneId: bigint;
    pieceCountOfZones: bigint;
    requiredItemsForMinting: string[];
    requiredItemAmount: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartSeasonEvent {
  export type InputTuple = [itemAddresses: AddressLike[]];
  export type OutputTuple = [itemAddresses: string[]];
  export interface OutputObject {
    itemAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockPuzzlePieceEvent {
  export type InputTuple = [
    zoneId: BigNumberish,
    tokenId: BigNumberish,
    to: AddressLike,
  ];
  export type OutputTuple = [zoneId: bigint, tokenId: bigint, to: string];
  export interface OutputObject {
    zoneId: bigint;
    tokenId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PlayDuzzle extends BaseContract {
  connect(runner?: ContractRunner | null): PlayDuzzle;
  waitForDeployment(): Promise<this>;

  interface: PlayDuzzleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>;

  blueprintItemToken: TypedContractMethod<[], [string], 'view'>;

  dalToken: TypedContractMethod<[], [string], 'view'>;

  getAllSeasonIds: TypedContractMethod<[], [bigint[]], 'view'>;

  getDataBySeasonId: TypedContractMethod<
    [id: BigNumberish],
    [
      [bigint[], string[][], bigint[][], bigint] & {
        pieceCountOfZones: bigint[];
        requiredItemsForMinting: string[][];
        requiredItemAmount: bigint[][];
        startedAt: bigint;
      },
    ],
    'view'
  >;

  getItemMintedCountsBySeasonId: TypedContractMethod<
    [id: BigNumberish],
    [
      [string[], bigint[], bigint[], boolean[]] & {
        materialItemTokens: string[];
        itemMaxSupplys: bigint[];
        itemMinted: bigint[];
        mintedBlueprint: boolean[];
      },
    ],
    'view'
  >;

  getPuzzlePieceMintedCountsBySeasonId: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint] & { totalPieceCount: bigint; mintedCount: bigint }],
    'view'
  >;

  getRandomItem: TypedContractMethod<[], [void], 'nonpayable'>;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >;

  offset: TypedContractMethod<[], [bigint], 'view'>;

  puzzlePieceToken: TypedContractMethod<[], [string], 'view'>;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    'nonpayable'
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;

  seasons: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalPieceCount: bigint;
        mintedCount: bigint;
        startedAt: bigint;
      },
    ],
    'view'
  >;

  setZoneData: TypedContractMethod<
    [
      zoneId: BigNumberish,
      pieceCount: BigNumberish,
      requiredItemsForMinting: AddressLike[],
      requiredItemAmount: BigNumberish[],
    ],
    [void],
    'nonpayable'
  >;

  startSeason: TypedContractMethod<
    [
      existedItemCollections: AddressLike[],
      newItemNames: string[],
      newItemSymbols: string[],
      newItemBaseUris: string[],
      maxSupplys: BigNumberish[],
      _totalPieceCount: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    'view'
  >;

  thisSeasonId: TypedContractMethod<[], [bigint], 'view'>;

  unlockPuzzlePiece: TypedContractMethod<
    [pieceId: BigNumberish],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'DEFAULT_ADMIN_ROLE',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'blueprintItemToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'dalToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getAllSeasonIds',
  ): TypedContractMethod<[], [bigint[]], 'view'>;
  getFunction(nameOrSignature: 'getDataBySeasonId'): TypedContractMethod<
    [id: BigNumberish],
    [
      [bigint[], string[][], bigint[][], bigint] & {
        pieceCountOfZones: bigint[];
        requiredItemsForMinting: string[][];
        requiredItemAmount: bigint[][];
        startedAt: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getItemMintedCountsBySeasonId',
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string[], bigint[], bigint[], boolean[]] & {
        materialItemTokens: string[];
        itemMaxSupplys: bigint[];
        itemMinted: bigint[];
        mintedBlueprint: boolean[];
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getPuzzlePieceMintedCountsBySeasonId',
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint] & { totalPieceCount: bigint; mintedCount: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getRandomItem',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'getRoleAdmin',
  ): TypedContractMethod<[role: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'grantRole',
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'hasRole',
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'offset',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'puzzlePieceToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceRole',
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'revokeRole',
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'seasons'): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalPieceCount: bigint;
        mintedCount: bigint;
        startedAt: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'setZoneData',
  ): TypedContractMethod<
    [
      zoneId: BigNumberish,
      pieceCount: BigNumberish,
      requiredItemsForMinting: AddressLike[],
      requiredItemAmount: BigNumberish[],
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'startSeason',
  ): TypedContractMethod<
    [
      existedItemCollections: AddressLike[],
      newItemNames: string[],
      newItemSymbols: string[],
      newItemBaseUris: string[],
      maxSupplys: BigNumberish[],
      _totalPieceCount: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'supportsInterface',
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'thisSeasonId',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'unlockPuzzlePiece',
  ): TypedContractMethod<[pieceId: BigNumberish], [void], 'nonpayable'>;

  getEvent(
    key: 'RoleAdminChanged',
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleGranted',
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleRevoked',
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: 'SetZoneData',
  ): TypedContractEvent<
    SetZoneDataEvent.InputTuple,
    SetZoneDataEvent.OutputTuple,
    SetZoneDataEvent.OutputObject
  >;
  getEvent(
    key: 'StartSeason',
  ): TypedContractEvent<
    StartSeasonEvent.InputTuple,
    StartSeasonEvent.OutputTuple,
    StartSeasonEvent.OutputObject
  >;
  getEvent(
    key: 'UnlockPuzzlePiece',
  ): TypedContractEvent<
    UnlockPuzzlePieceEvent.InputTuple,
    UnlockPuzzlePieceEvent.OutputTuple,
    UnlockPuzzlePieceEvent.OutputObject
  >;

  filters: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    'SetZoneData(uint8,uint8,address[],uint8[])': TypedContractEvent<
      SetZoneDataEvent.InputTuple,
      SetZoneDataEvent.OutputTuple,
      SetZoneDataEvent.OutputObject
    >;
    SetZoneData: TypedContractEvent<
      SetZoneDataEvent.InputTuple,
      SetZoneDataEvent.OutputTuple,
      SetZoneDataEvent.OutputObject
    >;

    'StartSeason(address[])': TypedContractEvent<
      StartSeasonEvent.InputTuple,
      StartSeasonEvent.OutputTuple,
      StartSeasonEvent.OutputObject
    >;
    StartSeason: TypedContractEvent<
      StartSeasonEvent.InputTuple,
      StartSeasonEvent.OutputTuple,
      StartSeasonEvent.OutputObject
    >;

    'UnlockPuzzlePiece(uint8,uint256,address)': TypedContractEvent<
      UnlockPuzzlePieceEvent.InputTuple,
      UnlockPuzzlePieceEvent.OutputTuple,
      UnlockPuzzlePieceEvent.OutputObject
    >;
    UnlockPuzzlePiece: TypedContractEvent<
      UnlockPuzzlePieceEvent.InputTuple,
      UnlockPuzzlePieceEvent.OutputTuple,
      UnlockPuzzlePieceEvent.OutputObject
    >;
  };
}
